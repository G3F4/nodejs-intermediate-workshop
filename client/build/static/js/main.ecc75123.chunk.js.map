{"version":3,"sources":["components/ReminderTime.tsx","components/ReminderBody.tsx","components/RemindButton.tsx","components/RemindersList.tsx","components/SubscriptionsList.tsx","components/RemindersTabs.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["withStyles","theme","root","display","flexWrap","textField","marginLeft","spacing","unit","marginRight","width","props","classes","value","onChange","Error","react_default","a","createElement","FormControl_default","className","TextField_default","format","id","label","type","InputLabelProps","shrink","ReminderBody","_this$props","this","multiline","rowsMax","margin","helperText","variant","React","Component","flexGrow","marginBottom","button","onClick","Button_default","color","backgroundColor","palette","background","paper","list","List_default","map","reminder","index","ListItem_default","key","ListItemText_default","primary","body","secondary","moment","time","DEVICE_ICON_MAP","Desktop","Computer","Mobile","Phone","SUBSCRIPTION_MOCK","device","browser","_props$list","subscription","Icon","index_es","Avatar_default","ListItemSecondaryAction_default","IconButton_default","aria-label","icons_index_es","TabContainer","_ref","children","dir","core_Typography_default","component","style","padding","RemindersTabs","state","handleChange","event","_this","setState","handleChangeIndex","reminders","subscriptions","AppBar_default","position","Tabs_default","indicatorColor","textColor","Tab_default","lib_default","axis","direction","onChangeIndex","components_RemindersList","pending","send","components_SubscriptionsList","flexDirection","minWidth","withTheme","App","Date","now","handleReminderBodyChange","target","handleReminderTimeChange","handleRemindButtonClick","_this$state","Object","objectSpread","concat","toConsumableArray","status","enqueueSnackbar","_this2","setInterval","length","lastPendingReminder","slice","_this$state2","header","Typography_default","gutterBottom","content","components_ReminderTime","components_ReminderBody","components_RemindButton","components_RemindersTabs","justifyContent","alignItems","withSnackbar","Boolean","window","location","hostname","match","ReactDOM","render","build","maxSnack","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ecc75123.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\nimport { StyledComponentProps, Theme, withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport moment, { Moment } from 'moment-timezone/moment-timezone';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst styles = (theme: Theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: theme.spacing.unit * 10 * 3,\n  },\n});\n\nexport interface ReminderTimeProps extends StyledComponentProps<keyof ReturnType<typeof styles>> {\n  value: Moment;\n\n  onChange(event: ChangeEvent<HTMLInputElement>): void;\n}\n\nfunction ReminderTime(props: ReminderTimeProps) {\n  const { classes, value, onChange } = props;\n\n  if (!classes) {\n    throw new Error(`error loading styles`);\n  }\n\n  return (\n    <FormControl className={classes.root}>\n      <TextField\n        onChange={onChange}\n        value={value.format('YYYY-MM-DDThh:mm')}\n        id=\"datetime-local\"\n        label=\"Remind time\"\n        type=\"datetime-local\"\n        className={classes.textField}\n        InputLabelProps={{\n          shrink: true,\n        }}\n      />\n    </FormControl>\n  );\n}\n\n// @ts-ignore\nexport default withStyles(styles)(ReminderTime);\n","import React, { ChangeEvent } from 'react';\nimport { StyledComponentProps, Theme, withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst styles = (theme: Theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    width: theme.spacing.unit * 10 * 4,\n  },\n});\n\nexport interface ReminderBodyProps extends StyledComponentProps<keyof ReturnType<typeof styles>> {\n  value: string;\n\n  onChange(event: ChangeEvent<HTMLInputElement>): void;\n}\n\nclass ReminderBody extends React.Component<ReminderBodyProps> {\n  render() {\n    const { classes, value, onChange } = this.props;\n\n    if (!classes) {\n      throw new Error(`error loading styles`);\n    }\n\n    return (\n      <FormControl className={classes.root}>\n        <TextField\n          id=\"outlined-multiline-flexible\"\n          label=\"Reminder body\"\n          multiline\n          rowsMax=\"4\"\n          value={value}\n          onChange={onChange}\n          className={classes.textField}\n          margin=\"normal\"\n          helperText=\"What?\"\n          variant=\"outlined\"\n        />\n      </FormControl>\n    );\n  }\n}\n\n// @ts-ignore\nexport default withStyles(styles)(ReminderBody);\n","import React from 'react';\nimport { StyledComponentProps, Theme, withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst styles = (theme: Theme) => ({\n  root: {\n    display: 'flex',\n    flexGrow: 1,\n    marginBottom: theme.spacing.unit * 2,\n  },\n  button: {\n    margin: theme.spacing.unit,\n  },\n});\n\nexport interface RemindButtonProps extends StyledComponentProps<keyof ReturnType<typeof styles>> {\n  onClick(): void;\n}\n\nfunction RemindButton(props: RemindButtonProps) {\n  const { classes, onClick } = props;\n\n  if (!classes) {\n    throw new Error(`error loading styles`);\n  }\n\n  return (\n    <div className={classes.root}>\n      <Button onClick={onClick} variant=\"contained\" color=\"primary\" className={classes.button}>\n        Remind me!\n      </Button>\n    </div>\n  );\n}\n\n// @ts-ignore\nexport default withStyles(styles)(RemindButton);\n","import React from 'react';\nimport { StyledComponentProps, Theme, withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { ReminderItem } from '../App';\nimport moment from 'moment-timezone/moment-timezone';\n\nconst styles = (theme: Theme) => ({\n  root: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n});\n\nexport interface RemindersListProps extends StyledComponentProps<keyof ReturnType<typeof styles>> {\n  list: ReminderItem[];\n}\n\nfunction RemindersList(props: RemindersListProps) {\n  const { classes, list } = props;\n\n\n  if (!classes) {\n    throw new Error(`error loading styles`);\n  }\n\n  return (\n    <List className={classes.root}>\n      {list.map((reminder, index) => (\n        <ListItem key={index}>\n          <ListItemText primary={reminder.body} secondary={moment(reminder.time).format('YYYY MM DD, hh:mm')} />\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n\nexport default withStyles(styles)(RemindersList);\n","import { ListItemAvatar } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport { Delete, Computer, Phone, HelpOutline } from '@material-ui/icons';\nimport React from 'react';\nimport { StyledComponentProps, Theme, withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst DEVICE_ICON_MAP: { [key: string]: any } = {\n  Desktop: Computer,\n  Mobile: Phone,\n};\n\nconst SUBSCRIPTION_MOCK = [\n  { id: '1', device: 'Desktop', browser: 'Chrome' },\n  { id: '2', device: 'Mobile', browser: 'Samsung Internet Browser' },\n];\n\nexport interface Subscription {\n  id: string;\n  device: string;\n  browser: string;\n}\n\nconst styles = (theme: Theme) => ({\n  root: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n});\n\nexport interface SubscriptionsListProps extends StyledComponentProps<keyof ReturnType<typeof styles>> {\n  list?: Subscription[];\n}\n\nfunction SubscriptionsList(props: SubscriptionsListProps) {\n  const { classes, list = SUBSCRIPTION_MOCK } = props;\n\n\n  if (!classes) {\n    throw new Error(`error loading styles`);\n  }\n\n  return (\n    <List className={classes.root}>\n      {list.map((subscription, index) => {\n        const Icon = DEVICE_ICON_MAP[subscription.device];\n\n        return (\n          <ListItem key={index}>\n            <ListItemAvatar>\n              <Avatar>\n                <Icon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText\n              primary={subscription.browser}\n            />\n            <ListItemSecondaryAction>\n              <IconButton aria-label=\"Delete\">\n                <Delete />\n              </IconButton>\n              <IconButton aria-label=\"Test\">\n                <HelpOutline />\n              </IconButton>\n            </ListItemSecondaryAction>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n}\n\nexport default withStyles(styles)(SubscriptionsList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledComponentProps, Theme, withStyles } from '@material-ui/core/styles';\nimport SwipeableViews from 'react-swipeable-views';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport { ReminderItem } from '../App';\nimport RemindersList from './RemindersList';\nimport SubscriptionsList, { Subscription } from './SubscriptionsList';\n\nfunction TabContainer({ children, dir }: { children: React.ReactNode, dir: string }) {\n  return (\n    <Typography component=\"div\" dir={dir} style={{ padding: 8 * 3 }}>\n      {children}\n    </Typography>\n  );\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n  dir: PropTypes.string.isRequired,\n};\n\nconst styles = (theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    minWidth: theme.spacing.unit * 10 * 4,\n  },\n});\n\nexport interface RemindersTabsProps extends StyledComponentProps<keyof ReturnType<typeof styles>> {\n  reminders: {\n    pending: ReminderItem[];\n    send: ReminderItem[];\n  };\n  subscriptions: Subscription[];\n\n  theme: Theme;\n}\n\ninterface State {\n  value: number;\n}\n\nclass RemindersTabs extends Component<RemindersTabsProps, State> {\n  state = {\n    value: 0,\n  };\n\n  handleChange = (event: React.ChangeEvent<{}>, value: any): void => {\n    this.setState({ value });\n  };\n\n  handleChangeIndex = (index: number) => {\n    this.setState({ value: index });\n  };\n\n  render() {\n    const { classes, theme, reminders, subscriptions } = this.props;\n\n    if (!classes) {\n      throw new Error(`error loading styles`);\n    }\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\" color=\"default\">\n          <Tabs\n            value={this.state.value}\n            onChange={this.handleChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"fullWidth\"\n          >\n            <Tab label=\"Future\" />\n            <Tab label=\"Past\" />\n            <Tab label=\"Subscriptions\" />\n          </Tabs>\n        </AppBar>\n        <SwipeableViews\n          axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n          index={this.state.value}\n          onChangeIndex={this.handleChangeIndex}\n        >\n          <TabContainer dir={theme.direction}>\n            <RemindersList list={reminders.pending} />\n          </TabContainer>\n          <TabContainer dir={theme.direction}>\n            <RemindersList list={reminders.send} />\n          </TabContainer>\n          <TabContainer dir={theme.direction}>\n            <SubscriptionsList list={subscriptions} />\n          </TabContainer>\n        </SwipeableViews>\n      </div>\n    );\n  }\n}\n\n// @ts-ignore\nexport default withStyles(styles, { withTheme: true })(RemindersTabs);\n","import { StyledComponentProps, Theme, withStyles } from '@material-ui/core';\nimport { Moment } from 'moment-timezone/moment-timezone';\nimport React, { ChangeEvent, Component } from 'react';\nimport ReminderTime from './components/ReminderTime';\nimport ReminderBody from './components/ReminderBody';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport RemindButton from './components/RemindButton';\nimport RemindersTabs from './components/RemindersTabs';\nimport moment from 'moment-timezone/moment-timezone';\nimport { withSnackbar } from 'notistack';\nimport { Subscription } from './components/SubscriptionsList';\n\nconst styles = (theme: Theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexDirection: 'column',\n  },\n  header: {\n    margin: theme.spacing.unit * 2,\n    display: 'flex',\n    flexGrow: 1,\n    justifyContent: 'center',\n  },\n  content: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    display: 'flex',\n    flexGrow: 1,\n    justifyContent: 'center',\n    flexDirection: 'column',\n    alignItems: 'center',\n  }\n});\n\nexport interface AppProps extends StyledComponentProps<keyof ReturnType<typeof styles>> {\n  enqueueSnackbar(message: string): void;\n}\n\nexport type ReminderItemStatus = 'PENDING' | 'SEND';\n\nexport interface ReminderItem {\n  status: ReminderItemStatus;\n  time: Moment;\n  body: string;\n}\n\ninterface State {\n  reminders: {\n    pending: ReminderItem[];\n    send: ReminderItem[];\n  };\n  subscriptions?: Subscription[];\n  time: Moment;\n  body: string;\n}\n\nclass App extends Component<AppProps, State> {\n  state: State = {\n    body: '',\n    time: moment(Date.now()),\n    reminders: {\n      pending: [],\n      send: [],\n    },\n  };\n\n  componentDidMount() {\n    setInterval(() => {\n      const { reminders } = this.state;\n\n      if (reminders.pending.length > 0) {\n        const lastPendingReminder = reminders.pending[reminders.pending.length - 1];\n\n        this.setState({\n          reminders: {\n            ...reminders,\n            pending: reminders.pending.slice(0, reminders.pending.length - 2),\n            send: [\n              ...reminders.send,\n              { ...lastPendingReminder, status: 'SEND' }\n            ],\n          },\n        });\n\n        this.props.enqueueSnackbar(`Notification was send. Body: ${lastPendingReminder.body}`);\n      }\n    }, 10000)\n  }\n\n  handleReminderBodyChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    this.setState({\n      body: event.target.value,\n    })\n  };\n\n  handleReminderTimeChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    this.setState({\n      time: moment(event.target.value),\n    })\n  };\n\n  handleRemindButtonClick = (): void => {\n    const { body, time, reminders } = this.state;\n\n    this.setState({\n      body: '',\n      time: moment(Date.now()),\n      reminders: {\n        ...reminders,\n        pending: [\n          ...reminders.pending,\n          { body, time, status: 'PENDING' }\n        ],\n      },\n    });\n\n    this.props.enqueueSnackbar('New reminder saved!');\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { body, reminders, time } = this.state;\n\n    if (!classes) {\n      throw new Error(`error loading styles`);\n    }\n\n    return (\n      <div className={classes.root}>\n        <header className={classes.header}>\n          <Typography component=\"h1\" variant=\"h2\" gutterBottom>Reminder</Typography>\n        </header>\n        <div className={classes.content}>\n          <ReminderTime value={time} onChange={this.handleReminderTimeChange} />\n          <ReminderBody value={body} onChange={this.handleReminderBodyChange} />\n          <RemindButton onClick={this.handleRemindButtonClick} />\n          <RemindersTabs reminders={reminders} />\n        </div>\n      </div>\n    );\n  }\n}\n\n// @ts-ignore\nexport default withStyles(styles)(withSnackbar(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SnackbarProvider } from 'notistack';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <SnackbarProvider maxSnack={3}>\n    <App />\n  </SnackbarProvider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}